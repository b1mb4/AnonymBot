// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram WebApp
document.addEventListener('DOMContentLoaded', function() {
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram WebApp, —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–æ
    if (window.Telegram && window.Telegram.WebApp) {
        const tg = window.Telegram.WebApp;

        // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ–º–∏
        document.body.className = 'telegram-theme';

        // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è Telegram, —â–æ –¥–æ–¥–∞—Ç–æ–∫ –≥–æ—Ç–æ–≤–∏–π
        tg.ready();

        // –†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∫—É –Ω–∞ –≤–µ—Å—å –µ–∫—Ä–∞–Ω
        tg.expand();

        // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä—ñ–≤ —Ç–µ–º–∏, —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–æ
        applyTelegramTheme();
    }

    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    updateMessages();

    // –î–æ–¥–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –∫–Ω–æ–ø—Ü—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    const refreshBtn = document.getElementById('refresh-btn');
    if (refreshBtn) {
        refreshBtn.addEventListener('click', function() {
            this.classList.add('refreshing');
            setTimeout(() => {
                this.classList.remove('refreshing');
            }, 1000);
        });
    }
});

// –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ç–µ–º–∏ Telegram
function applyTelegramTheme() {
    if (window.Telegram && window.Telegram.WebApp) {
        const tg = window.Telegram.WebApp;

        // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è CSS-–∑–º—ñ–Ω–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –∫–æ–ª—å–æ—Ä—ñ–≤ —Ç–µ–º–∏ Telegram
        document.documentElement.style.setProperty('--tg-theme-bg-color', tg.themeParams.bg_color || '#f5f5f5');
        document.documentElement.style.setProperty('--tg-theme-text-color', tg.themeParams.text_color || '#333333');
        document.documentElement.style.setProperty('--tg-theme-hint-color', tg.themeParams.hint_color || '#888888');
        document.documentElement.style.setProperty('--tg-theme-link-color', tg.themeParams.link_color || '#2481cc');
        document.documentElement.style.setProperty('--tg-theme-button-color', tg.themeParams.button_color || '#2481cc');
        document.documentElement.style.setProperty('--tg-theme-button-text-color', tg.themeParams.button_text_color || '#ffffff');
        document.documentElement.style.setProperty('--tg-theme-secondary-bg-color', tg.themeParams.secondary_bg_color || '#ffffff');
    }
}

// –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏ –∑ –≤—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å—É –£–∫—Ä–∞—ó–Ω–∏ (GMT+2)
function formatDate(dateString) {
    if (!dateString) return '';

    try {
        // –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –¥–∞—Ç–∏
        const utcDate = new Date(dateString);
        if (isNaN(utcDate.getTime())) return '';

        // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ UTC –≤ GMT+2 (–¥–æ–¥–∞—î–º–æ 2 –≥–æ–¥–∏–Ω–∏)
        const localDate = new Date(utcDate.getTime() + (2 * 60 * 60 * 1000));

        // –ü–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞ —É GMT+2
        const now = new Date();
        const nowGmt2 = new Date(now.getTime() + (2 * 60 * 60 * 1000));
        const today = new Date(nowGmt2.getFullYear(), nowGmt2.getMonth(), nowGmt2.getDate());
        const yesterday = new Date(today);
        yesterday.setDate(yesterday.getDate() - 1);

        // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É (–≥–æ–¥–∏–Ω–∏:—Ö–≤–∏–ª–∏–Ω–∏)
        const hours = String(localDate.getUTCHours()).padStart(2, '0');
        const minutes = String(localDate.getUTCMinutes()).padStart(2, '0');
        const timeString = `${hours}:${minutes}`;

        // –Ø–∫—â–æ —Å—å–æ–≥–æ–¥–Ω—ñ
        if (localDate >= today) {
            return `–°—å–æ–≥–æ–¥–Ω—ñ, ${timeString}`;
        }

        // –Ø–∫—â–æ –≤—á–æ—Ä–∞
        if (localDate >= yesterday) {
            return `–í—á–æ—Ä–∞, ${timeString}`;
        }

        // –Ü–Ω–∞–∫—à–µ –ø–æ–≤–Ω–∞ –¥–∞—Ç–∞
        const day = String(localDate.getUTCDate()).padStart(2, '0');
        const month = String(localDate.getUTCMonth() + 1).padStart(2, '0');
        const year = localDate.getUTCFullYear();

        return `${day}.${month}.${year}, ${timeString}`;
    } catch (e) {
        console.error("–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏:", e);
        return dateString || '';
    }
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
function updateMessages() {
    const messagesContainer = document.getElementById('messages-container');
    const filterSelect = document.getElementById('filter');
    const limit = filterSelect ? filterSelect.value : 10;

    // –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å animation –¥–æ –∫–Ω–æ–ø–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    const refreshBtn = document.getElementById('refresh-btn');
    if (refreshBtn) {
        refreshBtn.innerHTML = 'üîÑ –û–Ω–æ–≤–ª—é—î—Ç—å—Å—è...';
    }

    // –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    messagesContainer.innerHTML = '<div class="loading">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div>';

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ API
    fetch(`/messages?limit=${limit}`)
        .then(response => {
            if (!response.ok) {
                throw new Error('–°–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ–º–∏–ª–∫—É: ' + response.status);
            }
            return response.json();
        })
        .then(data => {
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ–º–∏–ª–∫—É –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            if (data.error) {
                throw new Error(data.error);
            }

            messagesContainer.innerHTML = '';

            if (!Array.isArray(data) || data.length === 0) {
                messagesContainer.innerHTML = '<div class="empty-message">–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø–æ–∫–∏ –Ω–µ–º–∞—î</div>';
                return;
            }

            data.forEach(message => {
                const messageElement = document.createElement('div');
                messageElement.className = 'message';

                const messageText = document.createElement('div');
                messageText.className = 'message-text';
                messageText.textContent = message.text;

                messageElement.appendChild(messageText);

                // –î–æ–¥–∞–≤–∞–Ω–Ω—è —á–∞—Å—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–æ
                if (message.timestamp) {
                    const messageTime = document.createElement('div');
                    messageTime.className = 'message-time';
                    messageTime.textContent = formatDate(message.timestamp);
                    messageElement.appendChild(messageTime);
                }

                messagesContainer.appendChild(messageElement);
            });

            // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            if (refreshBtn) {
                refreshBtn.innerHTML = 'üîÑ';
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å
            const statusElement = document.querySelector('.status-message');
            if (statusElement) {
                const now = new Date();
                // –î–æ–¥–∞—î–º–æ 2 –≥–æ–¥–∏–Ω–∏ –¥–ª—è GMT+2
                const localNow = new Date(now.getTime() + (2 * 60 * 60 * 1000));
                const hours = String(localNow.getUTCHours()).padStart(2, '0');
                const minutes = String(localNow.getUTCMinutes()).padStart(2, '0');
                const seconds = String(localNow.getUTCSeconds()).padStart(2, '0');
                statusElement.textContent = `–û–Ω–æ–≤–ª–µ–Ω–æ –æ ${hours}:${minutes}:${seconds}`;
            }
        })
        .catch(error => {
            console.error('–ü–æ–º–∏–ª–∫–∞:', error);
            messagesContainer.innerHTML = `
                <div class="error-message">
                    <p>–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</p>
                    <p class="error-details">${error.message}</p>
                    <button onclick="updateMessages()" class="refresh-button">–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑</button>
                </div>
            `;

            // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            if (refreshBtn) {
                refreshBtn.innerHTML = 'üîÑ';
            }
        });
}

// –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
setInterval(updateMessages, 30000); // –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
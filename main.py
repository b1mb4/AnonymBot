import asyncio
import logging
import aiohttp
from aiogram import Bot, Dispatcher
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, CommandStart
from aiogram.types import WebAppInfo

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7830618724:AAFMhiP-DOV8fAs64Ecm3TUF-Xb-0zexJZI"

# URL –≤–∞—à–æ–≥–æ –¥–æ–¥–∞—Ç–∫—É –Ω–∞ Render
WEBAPP_URL = "https://anonymbot-n1ms.onrender.com"  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à URL

# URL –¥–ª—è API-–µ–Ω–¥–ø–æ—ñ–Ω—Ç—É
API_URL = f"{WEBAPP_URL}/bot/messages"

# API-–∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É
API_KEY = "AKe5Df9cB7zX2pQr8tYw3mVn6uJh4gLs"  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Ç–æ–π –∂–µ –∫–ª—é—á, —â–æ —ñ –≤ app.py

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()


# === –û–ë–†–û–ë–ù–ò–ö–ò –ë–û–¢–ê ===

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def command_start(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É /start –≤—ñ–¥ {message.from_user.id}")
    await message.answer(
        "üëã –í—ñ—Ç–∞—é! –ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –±—É–¥—å —è–∫—É —Å–≤–æ—é –ø–æ—Ç—Ä–µ–±—É, —ñ —è –∑–±–µ—Ä–µ–∂—É —ó—ó.\n\n–í–æ–Ω–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –±—É–¥–µ –ø–æ—á—É—Ç–∞.")


# –ö–æ–º–∞–Ω–¥–∞ /read
@dp.message(Command("read"))
async def command_read(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /read"""
    logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É /read –≤—ñ–¥ {message.from_user.id}")

    try:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìñ –í—ñ–¥–∫—Ä–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", web_app=WebAppInfo(url=WEBAPP_URL))]
            ]
        )

        await message.answer("üì© –ü–æ–º–æ–ª–∏—Ç–∏—Å—è –∑–∞ –ø–æ—Ç—Ä–µ–±–∏ –º–æ–∂–Ω–∞ —Ç—É—Ç:", reply_markup=keyboard)
        logger.info("–ö–Ω–æ–ø–∫–∞ WebApp –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–æ–º–∞–Ω–¥–∏ /read: {e}")
        await message.answer(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–Ω–µ –∫–æ–º–∞–Ω–¥)
@dp.message()
async def save_message(message: Message):
    """–ó–±–µ—Ä—ñ–≥–∞—î –∞–Ω–æ–Ω—ñ–º–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
    try:
        user_id = str(message.from_user.id)
        text = message.text

        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {user_id}: {text[:20]}...")

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ API
        async with aiohttp.ClientSession() as session:
            async with session.post(
                    API_URL,
                    json={"text": text, "user_id": user_id},
                    headers={"X-API-Key": API_KEY}
            ) as response:

                if response.status == 200:
                    result = await response.json()
                    if result.get("success"):
                        await message.answer("‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –∞–Ω–æ–Ω—ñ–º–Ω–æ.")
                        logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ, message_id: {result.get('message_id')}")
                    else:
                        error = result.get("error", "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞")
                        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {error}")
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞: {error}")
                else:
                    await message.answer(f"‚ùå –°–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ–º–∏–ª–∫—É: {response.status}")
                    logger.error(f"–°–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä–Ω—É–≤ —Å—Ç–∞—Ç—É—Å {response.status}")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä: {e}")
        await message.answer("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")


async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞...")
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")


if __name__ == "__main__":
    asyncio.run(main())